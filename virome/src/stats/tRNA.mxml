<?xml version="1.0" encoding="utf-8"?>
<mx:Panel  xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"   
		   xmlns:cfservice="services.*"
		   xmlns:stats="stats.*" 
		   xmlns:local="*"		    
		   styleName="catalogPanel" 
		   width="100%" height="100%" 
		   borderStyle="solid" 
		   title="tRNA" 
		   addedToStage="onAddtoStage()" 
		   show="onShow()" xmlns:statistics="services.statistics.*">
	
	<fx:Script>
		<![CDATA[
			import com.ChartnData;
			import com.DataGridUtils;
			import com.MyUtility;
			import com.component.MyGridItem;
			import com.component.MyGridRow;
			import com.component.MyNumberFormatter;
			import com.events.FileSelectorEvent;
			import com.events.SearchDBEvent;
			import com.events.SetSearchDBFormEvent;
			import com.google.analytics.AnalyticsTracker;
			import com.google.analytics.GATracker;
			
			import mx.charts.HitData;
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.DataGrid;
			import mx.controls.Label;
			import mx.controls.LinkButton;
			import mx.controls.Text;
			import mx.core.FlexGlobals;
			import mx.events.ToolTipEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			[Bindable] private var _util:MyUtility = new MyUtility();
			private var doubleClickFlag:Boolean = true;
			
			public var tracker:AnalyticsTracker;

			private var _libraryId:Number = 0;
			private var _environment:String = "";
			private var _libraryInfoObject:Object;
			private var _flag:Boolean = true;
			
			[Bindable] public function set libraryId(v:Number):void{
				_libraryId = v;
			}
			[Bindable] public function set environment(v:String):void{
				_environment = v;
			}
			[Bindable] public function set libraryInfoObject(v:Object):void{
				_libraryInfoObject = v;
			}
			[Bindable] public function set flag(v:Boolean):void{
				_flag = v;
			}
			
			public function get libraryId():Number{
				return _libraryId;
			}
			public function get environment():String{
				return _environment;
			}
			public function get libraryInfoObject():Object{
				return _libraryInfoObject;
			}
			public function get flag():Boolean{
				return _flag;
			}
			
			private function onAddtoStage():void{
				//track
				tracker = new GATracker( this, _util.trackerId, "AS3", false );			
			}
			
			private function onShow():void{
				//set google tracker
				tracker.trackPageview( "/STATISTICS/tRNA" );
				
				if ((flag) && (libraryId > 0) && (environment.length > 0)){
					flag = false;
					trnaStat.token = Statistics.gettRNAStats(libraryId,environment);
				}
				
				
				tRNAChart.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, _util.chartNdataTip);
			}
			
			private function tRNAResponse(event:ResultEvent):void{
				demo.libraryInfoObject = libraryInfoObject;
				demo.showValues();
				
				var xml:XML = new XML(new String(event.result));
				
				if (xml.children().length()){
					graph.visible = true;
					msg.visible = false;
					tRNAChart.dataProvider = xml.children();
					trnaSeq.token = Statistics.gettRNASeq(libraryId,environment);
					
				}else {
					graph.visible = false;
					msg.visible = true;
				}
				
				demo.validateNow();
			}
			
			private function tRNASeqResponse(event:ResultEvent):void{
				var ac:ArrayCollection = event.result as ArrayCollection;
				tRNA_grid.dataProvider = ac;
			}
			
			private function dataTipFunc(hd:HitData):String {
				return ("Codon: " + hd.item.@LABEL + "\n" + "Count: " + hd.item.@VALUE);
			}
			
			private function chartClick(event:MouseEvent,str:String):void{
				new ChartnData(event,libraryInfoObject['LIBNAME'],str);
			}
			
			private function seqClickEvent(e:MouseEvent):void{
				var _sf:SetSearchDBFormEvent = new SetSearchDBFormEvent();
				_sf.environment = environment;
				_sf.library = libraryId;
				_sf.sequence = e.currentTarget.label;
				_sf.vircat = "tRNA";
				_sf.evalue = 0.1;
				
				_util.simulateSearchClick(_sf);
			}
			
			private function tRNAClickHandler(event:ChartItemEvent):void{
				//check if double click or single click
				var timer:Timer = new Timer(500,1);
				var xml:XML = (event.hitData.chartItem.item as XML);
				
				if (doubleClickFlag){
					timer.addEventListener(TimerEvent.TIMER_COMPLETE,function ():void{doubleClickFlag=true;});
					timer.start();
					doubleClickFlag = false;
				} else {
					timer.stop();
					doubleClickFlag = true;
					
					//disable tRNA double click to search.
					
					//var _sf:SetSearchDBFormEvent = new SetSearchDBFormEvent();
					//_sf.environment = environment;
					//_sf.library = libraryId;
					//_sf.readId = xml.@IDLIST;
					//_sf.vircat = "tRNA";
					//_sf.evalue = 0.1;
					
					//_util.simulateSearchClick(_sf);
				}	
			}
			
			private function downloadtRNAGrid():void{
				var gridContent:String = DataGridUtils.loadDataGridInExcel(tRNA_grid);
				var downloadPanel:DownloadFile = DownloadFile(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), DownloadFile, true));
				
				var fileselector:FileSelectorEvent = new FileSelectorEvent();
				fileselector.csv = true;
				
				var generalObject:SearchDBEvent = new SearchDBEvent();
				generalObject.environment = environment;
				generalObject.library = libraryId;
				
				downloadPanel._fileSelector = fileselector.getFileSelectorObject();
				downloadPanel._searchDBObj = generalObject.getStruct();
				downloadPanel._content = gridContent;
				
				PopUpManager.bringToFront(downloadPanel);
				PopUpManager.centerPopUp(downloadPanel);
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:CallResponder id="trnaStat" result="tRNAResponse(event)"/>
		<s:CallResponder id="trnaSeq" result="tRNASeqResponse(event)"/>
		<statistics:Statistics id="Statistics" showBusyCursor="true" fault="_util.faultHandler(event)"
							  destination="ColdFusion" endpoint="{_util.endpoint}" source="{_util.cfcPath}.Statistics" />
	</fx:Declarations>

	<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off">
		<mx:VBox width="100%" horizontalGap="0" verticalGap="0" paddingRight="20" paddingBottom="15">
			<stats:LibraryDemograph id="demo" libraryInfoObject="{libraryInfoObject}" width="100%"/>
			
			<mx:Text text="No tRNA found for the give library" width="100%" textAlign="center" styleName="strong" visible="false" id="msg"/>

			<mx:VBox id="graph" width="100%" visible="false">				
				<mx:Text width="100%" textAlign="center" styleName="strong" paddingTop="15" condenseWhite="true">
					<mx:text>
						The histogram below shows the distribution of tRNA. 
						Each bar represents the number of sequences for a certain codon.
					</mx:text>
				</mx:Text>
				
				<!--itemClick="tRNAClickHandler(event);"--> 
				<mx:BarChart id="tRNAChart" width="100%" height="100%"
							 showDataTips="true" dataTipFunction="dataTipFunc"  
							 
							 click="chartClick(event,'tRNA');"
							 toolTip="tip"
							 paddingBottom="0" paddingLeft="0" 
							 paddingRight="0" paddingTop="0">
					
					<mx:horizontalAxis>
						<mx:LinearAxis id="hAxis"/>
					</mx:horizontalAxis>
					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer labelRotation="-45" axis="{hAxis}"/>
					</mx:horizontalAxisRenderers>
					<mx:verticalAxis>
						<mx:CategoryAxis id="vAxis" categoryField="@LABEL"/>
					</mx:verticalAxis>
					
					<mx:series>
						<mx:BarSeries id="colSeries" xField="@VALUE"/>
					</mx:series>
				</mx:BarChart>
				
				<mx:Button label="Download Grid" id="dl_tRNA_grid" click="downloadtRNAGrid()"/>
				<!--<mx:Grid width="100%" id="tRNA_grid" paddingTop="35" verticalGap="0" />-->

				<mx:DataGrid width="100%" id="tRNA_grid">
					<mx:columns>
						<mx:DataGridColumn dataField="NAME" headerText="Sequence Name"/>
						<mx:DataGridColumn dataField="NUM" headerText="tRNA No."/>
						<mx:DataGridColumn dataField="TRNA_START" headerText="Start"/>
						<mx:DataGridColumn dataField="TRNA_END" headerText="End"/>
						<mx:DataGridColumn dataField="ANTI" headerText="Amino Acid"/>
						<mx:DataGridColumn dataField="INTRON" headerText="Anitcodon"/>
						<mx:DataGridColumn dataField="SCORE" headerText="Score"/>
					</mx:columns>
				</mx:DataGrid>
				
			</mx:VBox>
		</mx:VBox>
	</mx:Canvas>
</mx:Panel>